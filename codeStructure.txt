Physics engine:

	una struct PhysVector:
		la struct deve rappresentare un vettore tridimensionale per scopi fisici, in quanto tale non ha inv. di classe
		membri:
			tre coordinate, x, y e z
		metodi/funzioni:
			+ e +=, - e -=, * e *=, ==, != tra PhysVectors
			* e *=, / e /= tra un PhysVector e un double
	
	una struct Particle:
		la struct deve rappresentare una particella sferica dotata di massa nello spazio tridimensionale, in quanto tale non ha inv. di classe
		membri:
			due PhysVector, position e speed
			due double static, mass e radius (il programma non ha lo scopo di rappresentare particelle di diverse dimensioni)
		metodi/funzioni:
			una funzione move(particle, t), che muove la particella nello spazio alla posizione che avra nel tempo t0 + t

Amogus
E necessario distinguere tra una collisione ed un cluster:
una collisione e una coppia di particelle o un muro e particella che collideranno tra loro in un tempo t maggiore o uguale a zero, mentre un cluster e una coppia di particelle oppure un muro e una particella che si trovano in contatto tra loro. Un cluster e una collisione con tempo uguale a zero. In questo senso un cluster e una collisione specializzata, in quanto su di esso puo essere applicato un metodo che risolve la collisione.

Ma se si risolvesse una collisione a piu particelle considerando urti immediatamente successivi fino a che tutte le particelle hanno tempo d'urto maggiore di zero?

	una class Gas:
		la classe deve rappresentare un gas in uno spazio tridimensionale contenente un solo tipo di particella sferica e contenuto in un contenitore cubico, in quanto tale ha due invarianti di classe da rispettare:
			in una qualsiasi istanza del gas, le particelle devono trovarsi all'interno della scatola
			in una qualsiasi istanza del gas, non devono esserci particelle la cui distanza dei centri sia inferiore al raggio delle particelle
		membri:
			un std::vector<Particle>, contenente tutte le particelle del gas
			un double time, che rappresenta la quantita di tempo passata dal primo stato del gas
		costruttori:
			un costruttore parametrico a cui si passano: numero di particelle, temperatura, lato del contenitore
			un costruttore a copia
		funzioni membro:
			una funzione moveGas che fornito un tempo sposta le particelle secondo la legge oraria		private???
			una funzione getNextCollision che trova la collisione successiva, chiama moveGas e restituisce la collisione;
				la funzione tiene in memoria una collisione PROBLEMA WEEWOOWEEWOO
			una funzione goToNextCollision()

Graphics engine:
	use the default antialiasing
	Per disegnare un gas bisogna:
		definire un osservatore:
			osservatore prospettico: un fuoco, un piano - fatto
		disegnare i muri:
			proiettare sul piano visivo un rettangolo
			inscurire ogni pixel del rettangolo
				utilizzando la classe ConvexShape
		disegnare gli assi
			disegnare una retta:
				proiettare sul piano visivo una retta
					disegnare la retta con la classe di default sf::Line
		disegnare le particelle:
			disegnare una sfera
				proiettare sul piano prospettico il centro e il raggio di una sfera.
					disegnare la forma di una sfera
						utilizzando una illuminazione costante relativamente all'osservatore -> una sfera verra sempre disegnata allo stesso modo, ma piu scura se piu lontana.

allora:
	l'idea e quella di implementare due classi separate per la risoluzione degli urti:
		per calcolare l'urto successivo allo stato corrente del gas e necessaria una classe Hit, che tiene in memoria sia le particelle coinvolte
		che il tempo nel quale la collisione avra luogo.
		per risolvere una collisione invece si propone l'utilizzo di una classe Cluster, che tiene in memoria solo le particelle coinvolte, dotata di 
		un metodo solveCluster che risolve la collisione.
		
		si propone di implementare la differenza tra un Hit con un muro e con una particella tramite il polimorfismo, creando una classe WallHit e una
		ParticleHit, che ereditino da una classe virtuale Hit?
		allo stesso modo si propone l'implementazione di una collisione come una collisione a particella o a muro, due classi distinte, dotate entrambe di una funzione membro solveCollision che risolva la collisione

		la funzione membro che trova e restituisce la collisione successiva potrebbe restituire in questo modo un puntatore alla classe madre delle due collisioni, e trovare la collisione successiva prima trovando la prima collisione a particelle tramite un'apposita funzione, poi trovando la prima collisione a muro tramite un'altra apposita funzione, per poi confrontare le due e restituire un puntatore alla collisione col tempo minore, per poi muovere le particelle del gas usando il tempo della collisione e risolvere la collisione trasferendone i contenuti all'interno di un cluster, a parte per il tempo, per poi utilizzare il metodo solveCluster per risolvere il cluster. Lol. Sarebbe necessario di conseguenza l'utilizzo di gestione dinamica della memoria.
		Per l'overhead di chiamata per le funzioni virtual, dato che la maggior parte del tempo di computazione sarebbe occupato dal calcolo delle prime collisioni e non della risoluzione delle collisioni, questo non dovrebbe implicare un overtime inaccettabile, anzi forse addirittura trascurabile rispetto al tempo di risoluzione.
		Chissa
